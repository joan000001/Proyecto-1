module hamming_detection (
  input logic [6:0] dataRaw,
  output logic [2:0] posError
);
  always_comb begin
    posError[0] = dataRaw[0]^dataRaw[2]^dataRaw[4]^dataRaw[6];
    posError[1] = dataRaw[1]^dataRaw[2]^dataRaw[5]^dataRaw[6];
    posError[2] = dataRaw[3]^dataRaw[4]^dataRaw[5]^dataRaw[6];
  end
endmodule

module correccion_error(
  input  logic [6:0] dataRaw,
  input  logic [2:0] sindrome,
  output logic [6:0] correccion,
  output logic [3:0] dataCorrecta
);
  always_comb begin
    correccion = dataRaw;
    if (sindrome != 3'b000) begin
        case (sindrome)
            3'b001: correccion[0] = ~correccion[0]; // Bit 1
            3'b010: correccion[1] = ~correccion[1]; // Bit 2
            3'b011: correccion[2] = ~correccion[2]; 
            3'b100: correccion[3] = ~correccion[3];
            3'b101: correccion[4] = ~correccion[4];
            3'b110: correccion[5] = ~correccion[5];
            3'b111: correccion[6] = ~correccion[6];
            default: /* no action */;
        endcase
    end
    
    dataCorrecta[3] = correccion[6];
    dataCorrecta[2] = correccion[5];
    dataCorrecta[1] = correccion[4];
    dataCorrecta[0] = correccion[2];
  end
endmodule

module display_7bits_leds (
  input  logic [6:0] coregido,
    output logic [6:0] led
);
    always_comb begin
        led[0] = coregido[0];
        led[1] = coregido[1];
        led[2] = coregido[2];
        led[3] = coregido[3];
        led[4] = coregido[4];
        led[5] = coregido[5];
        led[6] = coregido[6];
    end
endmodule